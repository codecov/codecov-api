name: API CI

on:
  push:
    branches:
      - main
      - staging
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  AR_REPO: ${{ secrets.CODECOV_API_IMAGE_V2 }}

jobs:
  lint:
    name: Run Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make lint.install
      - name: Check
        run: |
          make lint.check
  build:
    name: Build API
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: "auth"
        if: github.repository_owner == 'codecov'
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1.1.1"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.CODECOV_GCP_WIDP }}
          service_account: ${{ secrets.CODECOV_GCP_WIDSA }}

      - name: Docker configuration
        if: github.repository_owner == 'codecov'
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev

      - name: Cache Requirements
        id: cache-requirements
        uses: actions/cache@v3
        env:
          cache-name: cache-api-requirements
        with:
          path: |
            requirements.tar
          key: ${{ runner.os }}-api-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-api-${{ env.cache-name }}-

      - name: Build/pull requirements
        if: ${{ steps.cache-requirements.outputs.cache-hit == 'true' }}
        run: |
          docker load --input requirements.tar

      - name: Build/pull requirements
        if: ${{ steps.cache-requirements.outputs.cache-hit != 'true' }}
        run: |
          make build.requirements
          make save.requirements

      - name: Push Requirements
        if: github.repository_owner == 'codecov'
        run: |
          make push.requirements
      - name: Build app
        run: |
          make build.app
          make save.app
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-image
          path: app.tar
  codecovstartup:
    name: Codecov Startup
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/app.tar
          docker image ls -a
          make tag.latest

      - name: Run Startup
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.CODECOV_API_IMAGE_V2 }}:latest
          options: -v ${{ github.workspace }}:/app -e COMMIT_SHA=${{ github.sha }} -e CODECOV_TOKEN=${{ secrets.CODECOV_ORG_TOKEN }}
          run: |
            ls -a
            make test_env.container_prepare
            codecovcli create-commit -C $COMMIT_SHA
            codecovcli create-report -C $COMMIT_SHA
  ats:
    name: ATS
    needs: [build, codecovstartup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/app.tar
          docker image ls -a
          make tag.latest

      - name: Run ATS
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.CODECOV_API_IMAGE_V2 }}:latest
          options: -v ${{ github.workspace }}:/app -e COMMIT_SHA=${{ github.sha }} -e CODECOV_TOKEN=${{ secrets.CODECOV_ORG_TOKEN }} -e STATIC_TOKEN=${{ secrets.STATIC_TOKEN }}
          run: |
            make test_env.container_prepare
            codecovcli static-analysis --token=$STATIC_TOKEN
            codecovcli label-analysis --token=$STATIC_TOKEN --base-sha=$(git merge-base HEAD^ main) -C $COMMIT_SHA
            codecovcli --codecov-yml-path=codecov_cli.yml do-upload --plugin pycoverage --plugin compress-pycoverage --flag smart-labels --fail-on-error
  test:
    name: Test
    needs: [build, codecovstartup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/app.tar
          docker image ls -a
      - name: Install docker compose
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Bring test env up
        run: |
          make test_env.up
      - name: Prepare for tests
        run: |
          make test_env.prepare
      - name: Run unit tests
        run: |
          make test_env.run_unit
      - name: Check for migration conflicts
        run: |
          make test_env.check-for-migration-conflicts
      ## Don't upload on forks for now.
      - name: upload using codecovcli
        if: github.repository_owner == 'codecov'
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          codecovcli  do-upload --flag unit-latest-uploader --flag unit -t ${{ secrets.CODECOV_ORG_TOKEN }} -C $COMMIT_SHA \
            --coverage-files-search-exclude-folder=graphql_api/types/** \
            --coverage-files-search-exclude-folder=api/internal/tests/unit/views/cassetes/**
      - name: upload using codecovcli staging
        if: github.repository_owner == 'codecov'
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          codecovcli  do-upload --flag unit-latest-uploader --flag unit -t ${{ secrets.CODECOV_ORG_TOKEN_STAGING }} -C $COMMIT_SHA \
            --coverage-files-search-exclude-folder=graphql_api/types/** \
            --coverage-files-search-exclude-folder=api/internal/tests/unit/views/cassetes/**

  build-self-hosted:
    name: Build Self Hosted API
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: "auth"
        if: github.repository_owner == 'codecov'
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1.1.1"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.CODECOV_GCP_WIDP }}
          service_account: ${{ secrets.CODECOV_GCP_WIDSA }}

      - name: Docker configuration
        if: github.repository_owner == 'codecov'
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev

      - name: Cache Requirements
        id: cache-requirements
        uses: actions/cache@v3
        env:
          cache-name: cache-api-requirements
        with:
          path: |
            requirements.tar
          key: ${{ runner.os }}-api-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-api-${{ env.cache-name }}-

      - name: Build/pull requirements
        if: ${{ steps.cache-requirements.outputs.cache-hit == 'true' }}
        run: |
          docker load --input requirements.tar

      - name: Build/pull requirements
        if: ${{ steps.cache-requirements.outputs.cache-hit != 'true' }}
        run: |
          make build.requirements      

      - name: Build self hosted
        run: |
          make build.self-hosted
          make save.self-hosted

      - name: Build self hosted runtime
        run: |
          make build.self-hosted-runtime
          make save.self-hosted

      - name: Upload self-hosted-runtime
        uses: actions/upload-artifact@v3
        with:
          name: self-hosted-runtime
          path: self-hosted-runtime.tar

      - name: Upload self-hosted
        uses: actions/upload-artifact@v3
        with:
          name: self-hosted
          path: self-hosted.tar
  staging:
    name: Push Staging Image
    needs: [build, test]
    if: ${{ github.event.pull_request.merged == true && github.head_ref == 'staging' && github.repository_owner == 'codecov' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/app.tar
          docker image ls -a
      - name: Push staging
        run: |
          make tag.staging
          make push.staging
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.CODECOV_SENTRY_RELEASE_TOKEN }}
          SENTRY_ORG: ${{ secrets.CODECOV_SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.CODECOV_API_SENTRY_PROJECT }}
        with:
          environment: staging
  production:
    name: Push Production Image
    needs: [ build, test ]
    if: ${{ github.event.pull_request.merged == true && github.head_ref == 'main' && github.repository_owner == 'codecov' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/app.tar
          docker image ls -a
      - name: Push production
        run: |
          make tag.production
          make push.production
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.CODECOV_SENTRY_RELEASE_TOKEN }}
          SENTRY_ORG: ${{ secrets.CODECOV_SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.CODECOV_API_SENTRY_PROJECT }}
        with:
          environment: production
  self-hosted:
    name: Push Self Hosted Image
    needs: [ build-self-hosted, test ]
    if: ${{ github.event.pull_request.merged == true && github.head_ref == 'main' && github.repository_owner == 'codecov' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download self-hosted-runtime
        uses: actions/download-artifact@v3
        with:
          name: self-hosted-runtime
          path: /tmp
      - name: Download self-hosted
        uses: actions/download-artifact@v3
        with:
          name: self-hosted
          path: /tmp
      - name: Load built image
        run: |
          docker load --input /tmp/self-hosted-runtime.tar
          docker load --input /tmp/self-hosted.tar
          docker image ls -a
      - name: Push production
        run: |
          make tag.self-hosted-rolling
          make push.self-hosted-rolling