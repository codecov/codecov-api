# Generated by Django 4.2.3 on 2023-10-24 19:37

from django.db import migrations
from shared.django_apps.migration_utils import RiskyRunSQL

# from `legacy_migrations/migrations/legacy_sql/main/triggers/commits.py`
original_function = """
create or replace function commits_insert_pr_branch() returns trigger as $$
begin
    if new.pullid is not null and new.merged is not true then
    begin
        insert into pulls (repoid, pullid, author, head)
        values (new.repoid, new.pullid, new.author, new.commitid);
    exception when unique_violation then
    end;
    end if;

    if new.branch is not null then
    begin
        insert into branches (repoid, updatestamp, branch, authors, head)
        values (new.repoid, new.timestamp,
                new.branch,
                case when new.author is not null then array[new.author] else null end,
                new.commitid);
    exception when unique_violation then
    end;
    end if;

    update repos
    set updatestamp=now()
    where repoid=new.repoid;

    return null;
end;
$$ language plpgsql;
"""

# we're removing the `update repos` part since it can be very slow
replacement_function = """
create or replace function commits_insert_pr_branch() returns trigger as $$
begin
    if new.pullid is not null and new.merged is not true then
    begin
        insert into pulls (repoid, pullid, author, head)
        values (new.repoid, new.pullid, new.author, new.commitid);
    exception when unique_violation then
    end;
    end if;

    if new.branch is not null then
    begin
        insert into branches (repoid, updatestamp, branch, authors, head)
        values (new.repoid, new.timestamp,
                new.branch,
                case when new.author is not null then array[new.author] else null end,
                new.commitid);
    exception when unique_violation then
    end;
    end if;

    return null;
end;
$$ language plpgsql;
"""


class Migration(migrations.Migration):
    dependencies = [
        ("legacy_migrations", "0003_auto_20230120_1837"),
    ]

    operations = [
        RiskyRunSQL(
            replacement_function,
            reverse_sql=original_function,
        ),
    ]
