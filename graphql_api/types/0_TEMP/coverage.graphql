# Coverage is information related to a repo's
# main branch test coverage
type CoverageAnalysis {
  hits: Int
  misses: Int
  lines: Int
  coverageSha: String
  percentCovered: Float # formerly repo.coverage

  #  # TODO - not complete alignment with this type (missing partialsCount, fileCount) - what to do
  #  # formerly repo.coverage, repo.hits, repo.misses
  #  coverageTotals: CoverageTotals

  # formerly repo.measurements
  coverageMeasurements(
    interval: MeasurementInterval!
    after: DateTime
    before: DateTime
    branch: String
  ): [Measurement!]!

  ### FLAGS ###

  flagsCount: Int!
  flagsMeasurementsActive: Boolean!
  flagsMeasurementsBackfilled: Boolean!
  flags(
    filters: FlagSetFilters
    orderingDirection: OrderingDirection
    first: Int
    after: String
    last: Int
    before: String
  ): FlagConnection! @cost(complexity: 3, multipliers: ["first", "last"])

  ### COMPONENTS ###

  componentsMeasurementsActive: Boolean!
  componentsMeasurementsBackfilled: Boolean!
  componentsCount: Int!
  components(
    interval: MeasurementInterval!
    before: DateTime!
    after: DateTime!
    branch: String
    filters: ComponentMeasurementsSetFilters
    orderingDirection: OrderingDirection
  ): [ComponentMeasurements!]!
  # componentsYaml is used to list component filter terms ??
  componentsYaml(termId: String): [ComponentsYaml]!
}
