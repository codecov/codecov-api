# Repository is a named collection of files uploaded
# to a provider (e.g., github)
type Repository {
  # isFirstPullRequest fetches whether ??
  isFirstPullRequest: Boolean!
  # name fetches the repository's human readable identifier
  name: String!
  # active fetches the repo's active status as designated by provider
  active: Boolean!
  # activated fetches the repo's Codecov activation status
  activated: Boolean!
  # private fetches the repo's public/private status as designated at provider
  private: Boolean!
  # coverage fetches information to a repo's main branch test coverage
  coverage: Coverage
  # oldestCommitAt fetches main's oldest commit timestamp
  oldestCommitAt: DateTime
  # latestCommitAt fetches main's latest commit timestamp - TODO or is it any branch?
  latestCommitAt: DateTime
  updatedAt: DateTime
  author: Owner!
  uploadToken: String
  branch(name: String!): Branch
  commit(id: String!): Commit # TODO - does this work on any branch?
  pull(id: Int!): Pull
  pulls(
    filters: PullsSetFilters
    orderingDirection: OrderingDirection
    first: Int
    after: String
    last: Int
    before: String
  ): PullConnection @cost(complexity: 10, multipliers: ["first", "last"])
  # TODO - does this refer to commits on main only?
  commits(
    filters: CommitsSetFilters
    first: Int
    after: String
    last: Int
    before: String
  ): CommitConnection @cost(complexity: 10, multipliers: ["first", "last"])
  branches(
    filters: BranchesSetFilters
    first: Int
    after: String
    last: Int
    before: String
  ): BranchConnection @cost(complexity: 3, multipliers: ["first", "last"])
  flags(
    filters: FlagSetFilters
    orderingDirection: OrderingDirection
    first: Int
    after: String
    last: Int
    before: String
  ): FlagConnection! @cost(complexity: 3, multipliers: ["first", "last"])
  defaultBranch: String
  profilingToken: String
  criticalFiles: [CriticalFile!]!
  graphToken: String
  yaml: String
  bot: Owner
  flagsCount: Int!
  flagsMeasurementsActive: Boolean!
  flagsMeasurementsBackfilled: Boolean!
  componentsMeasurementsActive: Boolean!
  componentsMeasurementsBackfilled: Boolean!
  componentsCount: Int!
  measurements(
    interval: MeasurementInterval!
    after: DateTime
    before: DateTime
    branch: String
  ): [Measurement!]!
  repositoryConfig: RepositoryConfig
  staticAnalysisToken: String
  isATSConfigured: Boolean
  primaryLanguage: String
  languages: [String!]
  bundleAnalysisEnabled: Boolean
  coverageEnabled: Boolean
  components(
    interval: MeasurementInterval!
    before: DateTime!
    after: DateTime!
    branch: String
    filters: ComponentMeasurementsSetFilters
    orderingDirection: OrderingDirection
  ): [ComponentMeasurements!]!
  componentsYaml(termId: String): [ComponentsYaml]!
  testAnalyticsEnabled: Boolean
  isGithubRateLimited: Boolean!
  testResults(
    filters: TestResultsFilters
    ordering: TestResultsOrdering
    first: Int
    after: String
    last: Int
    before: String
  ): TestResultConnection! @cost(complexity: 10, multipliers: ["first", "last"])
}

type TestResultConnection {
  edges: [TestResultEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type TestResultEdge {
  cursor: String!
  node: TestResult!
}

type PullConnection {
  edges: [PullEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type PullEdge {
  cursor: String!
  node: Pull!
}

type CommitConnection {
  edges: [CommitEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type CommitEdge {
  cursor: String!
  node: Commit!
}

type BranchConnection {
  edges: [BranchEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type BranchEdge {
  cursor: String!
  node: Branch!
}

union RepositoryResult = Repository | NotFoundError | OwnerNotActivatedError
