type Repository {
  name: String!
  active: Boolean!
  activated: Boolean!
  private: Boolean!
  coverage: Float
  coverageSha: String
  hits: Int
  misses: Int
  lines: Int
  oldestCommitAt: DateTime
  latestCommitAt: DateTime
  updatedAt: DateTime
  author: Owner!
  uploadToken: String
  branch(name: String!): Branch
  commit(id: String!): Commit
  pull(id: Int!): Pull
  pulls(
    filters: PullsSetFilters
    orderingDirection: OrderingDirection
    first: Int
    after: String
    last: Int
    before: String
  ): PullConnection
  commits(
    filters: CommitsSetFilters
    first: Int
    after: String
    last: Int
    before: String
  ): CommitConnection
  branches(
    filters: BranchesSetFilters
    first: Int
    after: String
    last: Int
    before: String
  ): BranchConnection
  flags(
    filters: FlagSetFilters
    orderingDirection: OrderingDirection
    first: Int
    after: String
    last: Int
    before: String
  ): FlagConnection!
  defaultBranch: String
  profilingToken: String
  criticalFiles: [CriticalFile!]!
  graphToken: String
  yaml: String
  bot: Owner
  flagsCount: Int!
  flagsMeasurementsActive: Boolean!
  flagsMeasurementsBackfilled: Boolean!
  measurements(
    interval: MeasurementInterval!
    after: DateTime
    before: DateTime
    branch: String
  ): [Measurement!]!
  repositoryConfig: RepositoryConfig
  staticAnalysisToken: String
  isATSConfigured: Boolean
  primaryLanguage: String
  languages: [String!]
  bundleAnalysisEnabled: Boolean
}

type PullConnection {
  edges: [PullEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type PullEdge {
  cursor: String!
  node: Pull!
}

type CommitConnection {
  edges: [CommitEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type CommitEdge {
  cursor: String!
  node: Commit!
}

type BranchConnection {
  edges: [BranchEdge]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type BranchEdge {
  cursor: String!
  node: Branch!
}

union RepositoryResult = Repository | NotFoundError | OwnerNotActivatedError